import org.openhab.core.library.types.*
import org.openhab.model.script.actions.*

var boolean hallLightIsOn = false
var boolean landingLightIsOn = false
var Timer timer = null

rule "Light Scenes"
when
Item Light_scene received command
then
if (receivedCommand==0) { // white
    sendCommand(Light_scene_ColorSelect, new HSBType(new DecimalType(0),new PercentType(0),new PercentType(100)))
}
if (receivedCommand==1) { // red
    sendCommand(Light_scene_ColorSelect, new HSBType(new DecimalType(0),new PercentType(100),new PercentType(100)))
}
if (receivedCommand==2) { // yellow
    sendCommand(Light_scene_ColorSelect, new HSBType(new DecimalType(60),new PercentType(100),new PercentType(100)))
}
if (receivedCommand==3) { // green
    sendCommand(Light_scene_ColorSelect, new HSBType(new DecimalType(120),new PercentType(100),new PercentType(100)))
}
if (receivedCommand==4) { // dark green
    sendCommand(Light_scene_ColorSelect, new HSBType(new DecimalType(120),new PercentType(100),new PercentType(50)))
}
if (receivedCommand==5) { // cyan
    sendCommand(Light_scene_ColorSelect, new HSBType(new DecimalType(180),new PercentType(100),new PercentType(100)))
}
if (receivedCommand==6) { // blue
    sendCommand(Light_scene_ColorSelect, new HSBType(new DecimalType(240),new PercentType(100),new PercentType(100)))
}
if (receivedCommand==7) { // magenta
    sendCommand(Light_scene_ColorSelect, new HSBType(new DecimalType(300),new PercentType(100),new PercentType(100)))
}
end

rule "Lights on at sunset for 2 hours when away"
when
    Item Sunset_Event received update ON
then
    if (Auto_Away.state == ON) {
        sendCommand(Light_Hallway, ON)
        hallLightIsOn = true
        timer = createTimer(now.plusSeconds(7200)) [|
            sendCommand(Light_Hallway, OFF)
            hallLightIsOn = false
            ]
    }
end

rule "Lights on at motion after dark"
when
    Item Motion_Sensor_Hall changed from CLOSED to OPEN or
    Item Contact_BackDoor changed from CLOSED to OPEN or
    Item Contact_FrontDoor changed from CLOSED to OPEN
then
    if (Lumin_Sensor_Hall.state < 50) {
        var int i = 0
        while (i<10) { 
            sendCommand(Light_HallBrightness, INCREASE)
            Thread::sleep(350)
            i = i + 1
        }
        sendCommand(Light_Hallway, ON)
        hallLightIsOn = true
    }
end

rule "Lights off after motion finished"
when
    Item Motion_Sensor_Hall changed from OPEN to CLOSED
then
    if (hallLightIsOn == true) {
        var int j = 0
        while (j<10) {
            sendCommand(Light_HallBrightness, DECREASE)
            Thread::sleep(900)
            j = j + 1
        }
        sendCommand(Light_Hallway, OFF)
        hallLightIsOn = false
    }
end

rule "Upstairs Lights on at motion"
when
    Item Motion_Sensor_Landing changed from CLOSED to OPEN
then
    if (Lumin_Sensor_Landing.state < 50) {
        if (Light_LandingBrightness.state > 0) {
            sendCommand(Light_LandingBrightness, Light_LandingBrightness.state as DecimalType)
        }
        else {
            sendCommand(Light_LandingBrightness, 1)
        }
        landingLightIsOn = true
    }
    postUpdate(Motion_Sensor_Landing_LastUpdate, new DateTimeType())
end

rule "Upstairs Lights off after motion"
when
    Item Motion_Sensor_Landing changed from OPEN to CLOSED
then
    if (landingLightIsOn == true) {
        sendCommand(Light_Landing, OFF)
        landingLightIsOn = false
    }
    postUpdate(Motion_Sensor_Landing_LastUpdate, new DateTimeType())
end

rule "Test dimming"
when
    Item Test_Switch changed
then
    sendCommand(Test_Amount, 1)
end

rule "Test dimming 2"
when
    Item Test_Amount changed
then
    sendCommand(Light_LandingBrightness, Test_Amount.state as DecimalType)
end

